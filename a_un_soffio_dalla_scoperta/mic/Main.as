package  {		import flash.display.MovieClip;	import flash.media.Microphone; 	import flash.events.StatusEvent;	import flash.events.SampleDataEvent;	import flash.display.Sprite;	import flash.utils.ByteArray;	import flash.external.ExternalInterface;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.transitions.Tween; 	import fl.transitions.easing.*;	import flash.utils.*; 		public class Main extends MovieClip {				private var mic:Microphone;		private var bytes:ByteArray = new ByteArray();		private var tim:uint;		private var starttim:uint;		private var mintim:uint;		private var enabledCheck:Boolean = false;				public function Main() {						starttim = setTimeout(checkPanel, 15000);						if(ExternalInterface.available){				ExternalInterface.call("general_JS_call", "S");			}						micnames.text = Microphone.names.toString();						mic = Microphone.getMicrophone(0); 			mic.addEventListener(StatusEvent.STATUS, this.onMicStatus); 			mic.addEventListener(SampleDataEvent.SAMPLE_DATA, onSampleData);						mic.rate = 44;			mic.gain = 100;						linea.gotoAndStop(1);			honda.scaleY = .1;			clickBtn.alpha = 0;						i1.visible=i2.visible=false;			i1.alpha = i2.alpha = 0;						micName.text = mic.name;						this.stage.addEventListener(Event.ENTER_FRAME, loop);					}				private function onMicStatus(event:StatusEvent):void { 			clearTimeout(starttim);			if (event.code == "Microphone.Unmuted") { 				yesConsenso();				tim = setTimeout(checkLevel, 15000);				mintim = setTimeout(enableCheck, 1500);			}else if (event.code == "Microphone.Muted"){ 				noConsenso();			} 		}				private function checkPanel(){			trace("I");			ExternalInterface.call("general_JS_call", "I");		}				private function enableCheck(){			enabledCheck=true;		}				private function onSampleData(event:SampleDataEvent):void		{			levMic.text = "" + mic.activityLevel;			if(ExternalInterface.available){				//ExternalInterface.call("general_JS_call", mic.activityLevel);			}						var maxVal = 0;			for( var i:uint = 0; i < 256; i++ ) {				maxVal = Math.max(maxVal, event.data.readFloat());			}						if(maxVal>this.honda.scaleY){				this.honda.scaleY = maxVal;			}						if(enabledCheck && maxVal>.6){				mic.removeEventListener(StatusEvent.STATUS, this.onMicStatus); 				mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, onSampleData);				clearTimeout(tim);				ok();			}		}				private function checkLevel(){			noConsenso();		}										private function loop(e:Event){						this.honda.scaleY -= .01;			if(this.honda.scaleY<0.01){				this.honda.scaleY = .01;			}		}				private function yesConsenso():void{			trace("Y");			ExternalInterface.call("general_JS_call", "Y");		}						private function noConsenso():void{			var myTween:Tween = new Tween(clickBtn, "alpha", Strong.easeOut, 0, 1, 2, true);			honda.visible = false;			trace("N");			ExternalInterface.call("general_JS_call", "N");						clickBtn.addEventListener(MouseEvent.MOUSE_OVER, onOver);			clickBtn.addEventListener(MouseEvent.MOUSE_OUT, onOut);			clickBtn.addEventListener(MouseEvent.MOUSE_UP, onUp);		}		private function onOver(e:MouseEvent):void{			clickBtn.scaleX=clickBtn.scaleY=1.1;		}		private function onOut(e:MouseEvent):void{			clickBtn.scaleX=clickBtn.scaleY=1;		}		private function onUp(e:MouseEvent):void{			trace("G");			ExternalInterface.call("general_JS_call", "G");		}				private function ok(){			i1.visible=i2.visible=true;			linea.gotoAndStop(2);						i1.alpha=1;			var myTween1:Tween = new Tween(i1, "y", Strong.easeOut, i1.y, i1.y-50, 1, true);			var myTween1a:Tween = new Tween(i1, "alpha", Strong.easeOut, 1, 0, .75, true);			i2.alpha=1;			var myTween2:Tween = new Tween(i2, "y", Strong.easeOut, i2.y, i2.y-50, 1, true);			var myTween2a:Tween = new Tween(i2, "alpha", Strong.easeOut, 1, 0, .75, true);									setTimeout(onGo, 1000);		}				private function onGo():void{			trace("G");			ExternalInterface.call("general_JS_call", "G");		}		/*		private function draw(event:SampleDataEvent = null):void{			gr.graphics.clear();			gr.graphics.lineStyle(3, 0xFFFFFF);			for( var i:uint = 0; i < 256; i++ ) {				var num:Number = 80;				if(event) num = event.data.readFloat() * 80 + 80; // -Math.abs( )				if( i == 0 ) {					gr.graphics.moveTo( i*2, num );				} else {					gr.graphics.lineTo( i*2, num );				}			}		}		*/			}	}